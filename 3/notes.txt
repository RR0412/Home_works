
*****************************************************
–°–ø–∏—Å–æ–∫ ‚Äî –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (–∞–Ω–∞–ª–æ–≥ –º–∞—Å—Å–∏–≤–∞).
*****************************************************

–•—Ä–∞–Ω–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –ª—é–±–æ–≥–æ —Ç–∏–ø–∞.

–ó–∞–ø–∏—Å—å: [], —ç–ª–µ–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.

–°–æ–∑–¥–∞–Ω–∏–µ
empty = []
nums = [0,1,2,3,4,5,6,7,8,9]
foods = ['Eggs','Bacon','Tomatoes','Bread','Butter']
mix = ['Ice Cream', 15, 'Water', 18]
list((1,2,3))   # [1, 2, 3]

–ò–Ω–¥–µ–∫—Å—ã

–ù–∞—á–∞–ª–æ —Å 0, –∫–æ–Ω–µ—Ü —Å -1.

foods[0]   # 'Eggs'
foods[3]   # 'Bread'
foods[-1]  # 'Butter'
i = 2; foods[i]   # 'Tomatoes'

–°—Ç—Ä–æ–∫–∏ –∫–∞–∫ —Å–ø–∏—Å–∫–∏ —Å–∏–º–≤–æ–ª–æ–≤
s = 'abcde'
s[3]    # 'd'

*****************************************************
–°–ø–∏—Å–∫–∏ –≤ Python ‚Äî –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –º–µ—Ç–æ–¥—ã
*****************************************************
–°—Ä–µ–∑—ã

a[i:j] ‚Äî —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ç i –¥–æ j (–Ω–µ –≤–∫–ª—é—á–∞—è j)

foods[1:4]   # ['Bacon','Tomatoes','Bread']
foods[2:]    # ['Tomatoes','Bread','Butter']
foods[:3]    # ['Eggs','Bacon','Tomatoes']


a[i:j:k] ‚Äî —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ç i –¥–æ j —Å —à–∞–≥–æ–º k

foods[::3]   # ['Eggs','Bread']
foods[1:4:2] # ['Bacon','Bread']

–ò–∑–º–µ–Ω–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤

a[i] = x ‚Äî –∑–∞–º–µ–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–∞

a[i:j] = [...] ‚Äî –∑–∞–º–µ–Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö

foods[1] = 'Cheese'
foods[2:4] = ['Pickles','Cakes']

–û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
[1,2,3] + [4,5,6]      # [1,2,3,4,5,6]
[1,2,3] * 3            # [1,2,3,1,2,3,1,2,3]
'Eggs' in foods        # True
'100' not in digits    # True
len(digits)            # 10

–ú–µ—Ç–æ–¥—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è
foods.append('Milk')          # –¥–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç
foods.extend(['Jam','Honey']) # –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
foods.insert(2, 'Sausage')    # –≤—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–æ–∑–∏—Ü–∏—é
del foods[0]                  # —É–¥–∞–ª–∏—Ç—å –ø–æ –∏–Ω–¥–µ–∫—Å—É
foods.pop(1)                  # —É–¥–∞–ª–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å –ø–æ –∏–Ω–¥–µ–∫—Å—É
foods.pop()                   # —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π
foods.remove('Bacon')         # —É–¥–∞–ª–∏—Ç—å –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
foods.clear()                 # –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫

–ú–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞
digits.count(5)        # 1
foods.index('Tomatoes')# 2

–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
foods_copy = foods.copy()  # –∫–æ–ø–∏—è
foods.reverse()            # —Ä–∞–∑–≤–æ—Ä–æ—Ç
foods.sort()               # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
foods.sort(reverse=True)   # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é

*****************************************************
–ö–æ—Ä—Ç–µ–∂–∏ (tuple)
*****************************************************
üìå –ö–æ—Ä—Ç–µ–∂ ‚Äî —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö, –∫–∞–∫ —Å–ø–∏—Å–æ–∫, –Ω–æ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º–∞—è (immutable).
–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å –∏ –∑–∞–º–µ–Ω—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã.

–°–æ–∑–¥–∞–Ω–∏–µ
empty_tuple = ()                # –ø—É—Å—Ç–æ–π –∫–æ—Ä—Ç–µ–∂
yes_no = ('Yes', 'No')          # –æ–±—ã—á–Ω—ã–π –∫–æ—Ä—Ç–µ–∂
tuple([1, 2, 3])                # –∏–∑ —Å–ø–∏—Å–∫–∞ ‚Üí (1, 2, 3)


‚ö†Ô∏è –ö–æ—Ä—Ç–µ–∂ –∏–∑ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞:

my_tuple = ('a')    # —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞!
my_tuple = ('a',)   # –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ—Ä—Ç–µ–∂ ‚Üí ('a',)

–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
yes_no[1] = 'Maybe'
# TypeError: tuple object does not support item assignment

–û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
colors = ('red', 'green', 'blue')

colors + ('black', 'white')
# ('red', 'green', 'blue', 'black', 'white')

colors * 2
# ('red','green','blue','red','green','blue')

len(colors)      # 3
colors.count('red')   # 1
colors.index('blue')  # 2

üìç –ò—Ç–æ–≥–æ:
–°–ø–∏—Å–∫–∏ = –∏–∑–º–µ–Ω—è–µ–º—ã–µ (mutable)
–ö–æ—Ä—Ç–µ–∂–∏ = –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–µ (immutable)

*****************************************************
–°–ª–æ–≤–∞—Ä–∏:
*****************************************************
a[key] = x        # —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
key in a          # –µ—Å—Ç—å –∫–ª—é—á?
key not in a      # –Ω–µ—Ç –∫–ª—é—á–∞?
len(a)            # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤

–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
a.get(k, d=None)        # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É –∏–ª–∏ d/None
a.setdefault(k, d=None) # –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º d

–ü—Ä–æ—Å–º–æ—Ç—Ä
a.items()   # –ø–∞—Ä—ã (–∫–ª—é—á, –∑–Ω–∞—á–µ–Ω–∏–µ)
a.keys()    # –≤—Å–µ –∫–ª—é—á–∏
a.values()  # –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è

–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è
a.update(d)       # –¥–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å–∏
del a[k]          # —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á
a.pop(k, d=None)  # —É–¥–∞–ª–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ d
a.popitem()       # —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–∞—Ä—É
a.clear()         # –æ—á–∏—Å—Ç–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å

–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
b = a.copy()      # –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–∞—è –∫–æ–ø–∏—è

*****************************************************
–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ Python (range)
*****************************************************
–ò–Ω—Ç–µ—Ä–≤–∞–ª ‚Äî –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º–∞—è ‚Äú–Ω–∞ –ª–µ—Ç—É‚Äù. –ù–µ —Ö—Ä–∞–Ω–∏—Ç –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏, –∫–∞–∫ —Å–ø–∏—Å–æ–∫.

–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
range(stop)           # –æ—Ç 0 –¥–æ stop-1
range(start, stop)    # –æ—Ç start –¥–æ stop-1
range(start, stop, step)  # —Å —à–∞–≥–æ–º step (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π)


–ü—Ä–∏–º–µ—Ä—ã:

a = range(10)         # 0..9
a = range(3, 7)       # 3..6
a = range(1, 10, 2)   # 1,3,5,7,9
a = range(10, 1, -3)  # 10,7,4

–î–æ—Å—Ç—É–ø –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º
a[i]        # —ç–ª–µ–º–µ–Ω—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º i, –Ω–∞–ø—Ä–∏–º–µ—Ä: a[0] ‚Üí 1
a[i:j]      # —Å—Ä–µ–∑ –æ—Ç i –¥–æ j-1, –Ω–∞–ø—Ä–∏–º–µ—Ä: a[3:7] ‚Üí range(4,8)
a[i:j:k]    # —Å—Ä–µ–∑ —Å —à–∞–≥–æ–º k, –Ω–∞–ø—Ä–∏–º–µ—Ä: a[3:7:2] ‚Üí range(4,8,2)

–ú–µ—Ç–æ–¥—ã –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
x in a        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 10 in a ‚Üí False
len(a)        # –¥–ª–∏–Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: len(a) ‚Üí 9
a.count(x)    # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ x –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: a.count(5) ‚Üí 1
a.index(x)    # –∏–Ω–¥–µ–∫—Å x –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: a.index(5) ‚Üí 4

–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
list(a)       # –≤ —Å–ø–∏—Å–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä: list(a) ‚Üí [1,2,3,4]
tuple(a)      # –≤ –∫–æ—Ä—Ç–µ–∂, –Ω–∞–ø—Ä–∏–º–µ—Ä: tuple(a) ‚Üí (1,2,3,4)

*****************************************************
–ú–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤ Python (set)
*****************************************************
–ú–Ω–æ–∂–µ—Å—Ç–≤–æ ‚Äî —ç—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ–ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞.

–û–±–æ–∑–Ω–∞—á–∞—é—Ç—Å—è {} –∏–ª–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ set().
–î—É–±–ª–∏–∫–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è.
–ï—Å—Ç—å –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî frozenset.

–°–æ–∑–¥–∞–Ω–∏–µ
rooms  = {'bathroom', 'kitchen', 'hall'}
letters = set('abcde')         # {'a','b','c','d','e'}
digits  = set([1, 2, 2, 3, 4]) # {1,2,3,4}
frozen  = frozenset([1,2,3])   # –Ω–µ–∏–∑–º–µ–Ω—è–µ–º–æ–µ

–ú–µ—Ç–æ–¥—ã –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
len(s)       # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚Üí len({1,2,3}) = 3
x in s       # –ø—Ä–æ–≤–µ—Ä–∫–∞    ‚Üí 2 in {1,2,3} ‚Üí True
s.add(x)     # –¥–æ–±–∞–≤–∏—Ç—å    ‚Üí s={1}; s.add(2) ‚Üí {1,2}
s.remove(x)  # —É–¥–∞–ª–∏—Ç—å     ‚Üí {1,2}.remove(1) ‚Üí {2}

–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤
A.issubset(B)   # A ‚äÜ B   ‚Üí {1,2} <= {1,2,3} ‚Üí True
A.issuperset(B) # A ‚äá B   ‚Üí {1,2,3} >= {2}   ‚Üí True
A < B           # —Å—Ç—Ä–æ–≥–æ–µ ‚Üí {1} < {1,2}      ‚Üí True
A > B           # —Å—Ç—Ä–æ–≥–æ–µ ‚Üí {1,2,3} > {1,2}  ‚Üí True

–û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏
A | B   # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ       ‚Üí {1,2}|{2,3}   = {1,2,3}
A & B   # –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ       ‚Üí {1,2}&{2,3}   = {2}
A - B   # —Ä–∞–∑–Ω–æ—Å—Ç—å          ‚Üí {1,2,3}-{2}   = {1,3}
A ^ B   # —Å–∏–º–º. —Ä–∞–∑–Ω–æ—Å—Ç—å    ‚Üí {1,2}^{2,3}   = {1,3}

–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤
A |= B   # union_update      ‚Üí A={1}; A|={2,3} ‚Üí {1,2,3}
A &= B   # intersection_upd  ‚Üí A={1,2}; A&={2,3} ‚Üí {2}
A -= B   # difference_upd    ‚Üí A={1,2,3}; A-={2} ‚Üí {1,3}
A ^= B   # sym_diff_upd      ‚Üí A={1,2}; A^={2,3} ‚Üí {1,3}

*****************************************************
üìù –ö–æ–Ω–≤–µ—Ä—Å–∏—è —Ç–∏–ø–æ–≤ –¥–ª—è –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
*****************************************************
list() ‚Üí —Å–ø–∏—Å–æ–∫
–ü—Ä–∏–Ω–∏–º–∞–µ—Ç: —Å–ø–∏—Å–∫–∏, –∫–æ—Ä—Ç–µ–∂–∏, –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã, —Å—Ç—Ä–æ–∫–∏, —Å–ª–æ–≤–∞—Ä–∏, –º–Ω–æ–∂–µ—Å—Ç–≤–∞
–•—Ä–∞–Ω–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
list((1, 2, 3))     # [1, 2, 3]
list('abcd')        # ['a', 'b', 'c', 'd']

tuple() ‚Üí –∫–æ—Ä—Ç–µ–∂
–ü—Ä–∏–Ω–∏–º–∞–µ—Ç: —Å–ø–∏—Å–∫–∏, –∫–æ—Ä—Ç–µ–∂–∏, –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã, —Å—Ç—Ä–æ–∫–∏, —Å–ª–æ–≤–∞—Ä–∏, –º–Ω–æ–∂–µ—Å—Ç–≤–∞
–ù–µ–∏–∑–º–µ–Ω—è–µ–º—ã–π –∞–Ω–∞–ª–æ–≥ —Å–ø–∏—Å–∫–∞
tuple(['a', 'b', 'c', 'd'])   # ('a', 'b', 'c', 'd')

dict() ‚Üí —Å–ª–æ–≤–∞—Ä—å
–ü—Ä–∏–Ω–∏–º–∞–µ—Ç: —Å–ª–æ–≤–∞—Ä–∏, —Å–ø–∏—Å–∫–∏ –ø–∞—Ä (–∫–ª—é—á, –∑–Ω–∞—á–µ–Ω–∏–µ)
–ö–ª—é—á–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏
dict([('a', 1), ('b', 2), ('c', 3)])
# {'a': 1, 'b': 2, 'c': 3}

set() ‚Üí –º–Ω–æ–∂–µ—Å—Ç–≤–æ
–ü—Ä–∏–Ω–∏–º–∞–µ—Ç: —Å–ø–∏—Å–∫–∏, –∫–æ—Ä—Ç–µ–∂–∏, –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã, —Å—Ç—Ä–æ–∫–∏, —Å–ª–æ–≤–∞—Ä–∏, –º–Ω–æ–∂–µ—Å—Ç–≤–∞
–£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã
set([1, 2, 3, 1, 2, 3, 4, 2, 3, 4, 5])
# {1, 2, 3, 4, 5}

*****************************************************
üîÅ –¶–∏–∫–ª—ã –≤ Python
*****************************************************
–¶–∏–∫–ª ‚Äî —ç—Ç–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç —Ç–µ–ª–æ —Ü–∏–∫–ª–∞.
–ò—Ç–µ—Ä–∞—Ü–∏—è ‚Äî –æ–¥–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–ª–∞ —Ü–∏–∫–ª–∞.
–¶–∏–∫–ª—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –¥–µ–π—Å—Ç–≤–∏—è.
*****************************************************
üîπ –¶–∏–∫–ª while (¬´–ø–æ–∫–∞¬ª)
*****************************************************
–ü–æ–≤—Ç–æ—Ä—è–µ—Ç –±–ª–æ–∫ –∫–æ–¥–∞, –ø–æ–∫–∞ —É—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ (True).
–°–∏–Ω—Ç–∞–∫—Å–∏—Å:
while <–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —É—Å–ª–æ–≤–∏–µ>:
    <–±–ª–æ–∫ –∫–æ–¥–∞>

–ü—Ä–∏–º–µ—Ä —Å—á—ë—Ç—á–∏–∫–∞ (–æ—Ç 0 –¥–æ 4):
counter = 0
while counter < 5:
    print(counter)
    counter += 1

–í—ã–≤–æ–¥: 0 1 2 3 4

–°–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
a = 20
a /= 5   # —Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ a = a / 5
print(a) # 4.0

–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: +=, -=, *=, /=, //=, %=

–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
while True:
    print("I am working!")

True –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å—Ç–∞–Ω–µ—Ç False ‚Üí —Ü–∏–∫–ª –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è.
–ö–æ–¥ –ø–æ—Å–ª–µ –Ω–µ–≥–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è, –ø–æ–∫–∞ –Ω–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.

*****************************************************
–¶–∏–∫–ª for –≤ Python
*****************************************************
–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
–ü–µ—Ä–µ–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (—Å–ø–∏—Å–æ–∫, —Å—Ç—Ä–æ–∫–∞, –∫–æ—Ä—Ç–µ–∂, —Å–ª–æ–≤–∞—Ä—å, range)
–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ—Ç–∏–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.

–û–±—â–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
for <–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è> in <–∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π_–æ–±—ä–µ–∫—Ç>:
    <—Ç–µ–ª–æ —Ü–∏–∫–ª–∞>

–ü—Ä–∏–º–µ—Ä—ã
–î–∏–∞–ø–∞–∑–æ–Ω
for i in range(5):
    print(i)

–í—ã–≤–æ–¥:
0 1 2 3 4


–°–ø–∏—Å–æ–∫
sentence = ['My', 'head', 'is', 'big']
for word in sentence:
    print(word)

–í—ã–≤–æ–¥:
My
head
is
big

–°–ª–æ–≤–∞—Ä—å
colors = {'red': 'F00', 'green': '0F0', 'blue': '00F'}
for key in colors:
    print(key, '-', colors[key])


–í—ã–≤–æ–¥:
red - F00
green - 0F0
blue - 00F

‚ö†Ô∏è –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–µ–±–∏—Ä–∞—é—Ç—Å—è –∫–ª—é—á–∏.
–î–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –∏–ª–∏ –ø–∞—Ä –∏—Å–ø–æ–ª—å–∑—É–µ–º values() –∏–ª–∏ items().

2Ô∏è‚É£ –ö–ª—é—á–µ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã

üîπ break ‚Äì –≤—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞
counter = 0
while True:
    print('I am working!')
    counter += 1
    if counter >= 5:
        break
print('My turn comes!')


–í—ã–≤–æ–¥:
I am working! √ó5
My turn comes!

–ü—Ä–∏–º–µ—Ä –≤ for:

texts = ('First', 'Second', 'Third')
for text in texts:
    print(text)
    if text == 'Second':
        break


–í—ã–≤–æ–¥:
First
Second

–ö–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ break –≤ —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è.

üîπ continue ‚Äì –ø—Ä–æ–ø—É—Å–∫ –∏—Ç–µ—Ä–∞—Ü–∏–∏

for i in range(5):
    if i == 3:
        continue
    print(i)


–í—ã–≤–æ–¥:
0
1
2
4

–î–ª—è i = 3 print(i) –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.

üîπ –°–æ–≤–µ—Ç—ã

for –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å—á—ë—Ç—á–∏–∫–∞ –∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è.
–†–∞–±–æ—Ç–∞–µ—Ç —Å range(), —Å–ø–∏—Å–∫–∞–º–∏, —Å—Ç—Ä–æ–∫–∞–º–∏, –∫–æ—Ä—Ç–µ–∂–∞–º–∏, —Å–ª–æ–≤–∞—Ä—è–º–∏.