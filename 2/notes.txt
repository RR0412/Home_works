=========
    1
=========
Типы:
str -строки
int - числа
float - числа с точкой

операции с int и float:
a+b - сложение
a-b - вычитание
a*b - умножение
a/b - деление
a%b - остаток от деления
a**b - возведение в степень

операции с str:


str() - преобразование в строку
int() - преобразование в число
float() - преобразование в число с точкой

операции с int и float:



def ()  - функция.

def (a,b) - a и b - аргументы, передаваемые в функцию.

def add(a, b):   - объявление функции
    sum = a + b  - действие функции
    return sum   - результат функции (по умолчанию None,если нет return)

=  - оператор присвоения
== - оператор сравнения на равенство

sys.exit()  - завершение программы

=========
    2
=========
********************************************************
Методы строк:
********************************************************
+ – сложение строк
'a' + 'b'  # 'ab'


* – повтор строки
'a' * 5  # 'aaaaa'

in, not in – проверка подстроки

'Py' in 'Python'     # True
'thon' not in 'Python'  # False


len() – длина строки
len('abcde')  # 5

capitalize() – первая буква заглавная
'abc'.capitalize()  # 'Abc'
'ABC'.capitalize()  # 'Abc'


upper() – в верхний регистр
'Abcd'.upper()  # 'ABCD'


lower() – в нижний регистр
'Abcd'.lower()  # 'abcd'


startswith() – проверка начала
'abcd'.startswith('ab')  # True


endswith() – проверка конца
'abcd'.endswith('cd')  # True


join() – соединение списка строк
', '.join(['a', 'b'])  # 'a, b'


split() – разбиение строки
'a, b, c'.split(', ')  # ['a','b','c']


center() – выравнивание
'abc'.center(7)     # '  abc  '
'abc'.center(5,'*') # '*abc*'


strip() – убрать пробелы/символы по краям
'   a   '.strip()   # 'a'
'abaca'.strip('a')  # 'bac'


replace() – замена подстроки
'aaabaaa'.replace('a','b')  # 'bbbbbbb'

********************************************************
Методы чисел:
********************************************************
+ – сложение
3 + 4      # 7
2.5 + 3.5  # 6.0


- – вычитание
10 - 6     # 4
1.3 - 2.5  # -1.2


* – умножение
2 * 2      # 4
2.5 * 2.6  # 6.5


/ – деление (результат всегда float)
10 / 2   # 5.0
5 / 2    # 2.5


// – целочисленное деление (отбрасывает дробную часть)
10 // 2  # 5
5 // 2   # 2


% – остаток от деления
10 % 3   # 1
10 % 10  # 0


** – возведение в степень
2 ** 3   # 8
2 ** 10  # 1024


pow(a, b) – возведение в степень (аналог **)
pow(2, 3)   # 8
pow(2, 10)  # 1024


abs() – модуль числа
abs(1000)   # 1000
abs(-1000)  # 1000


round(x, n=0) – округление
работает по принципу «банковского округления» (0.5 → ближайшее чётное)
round(1.1)           # 1
round(1.9)           # 2
round(2.5)           # 2
round(3.5)           # 4
round(7.3333333, 4)  # 7.3333


math.floor(x) – округление вниз (в меньшую сторону)
import math
math.floor(1.9)  # 1


math.ceil(x) – округление вверх (в большую сторону)
import math
math.ceil(1.1)  # 2


math.sqrt(x) – квадратный корень
import math
math.sqrt(4)  # 2.0

********************************************************
Булев тип (bool) :
********************************************************
100 == 100   # True
1 == 2       # False

🔹 Операции сравнения

== – равно

2 == 2               # True
"Hello" == "hello"   # False


!= – не равно

2 != 2               # False
"Hello" != "hello"   # True


> – больше

5 > 2    # True
5 > 10   # False


< – меньше

5 < 2    # False
5 < 10   # True


>= – больше или равно

5 >= 2    # True
5 >= 5    # True
5 >= 10   # False


<= – меньше или равно

5 <= 2    # False
5 <= 5    # True
5 <= 10   # True

********************************************************
Логические Операции
********************************************************
and – логическое «И» (конъюнкция). Истина только если оба значения True.
True and True    # True
True and False   # False
False and True   # False
False and False  # False


or – логическое «ИЛИ» (дизъюнкция). Истина, если хотя бы одно значение True.
True or True     # True
True or False    # True
False or True    # True
False or False   # False


not – логическое «НЕ» (отрицание). Меняет значение на противоположное.
not True   # False
not False  # True


********************************************************
Таблицы истинности
********************************************************
🔹 and (логическое И)
Истина (True), только если оба аргумента истинны.
Первый	Второй	Выражение	Результат
True	True	True and True	True
True	False	True and False	False
False	True	False and True	False
False	False	False and False	False

🔹 or (логическое ИЛИ)
Истина (True), если хотя бы один аргумент истина.

Первый	Второй	Выражение	Результат
True	True	True or True	True
True	False	True or False	True
False	True	False or True	True
False	False	False or False	False
🔹 not (логическое НЕ)

Меняет значение на противоположное.

Первый	Выражение	Результат
True	not True	False
False	not False	True

********************************************************
Приоритет логических операций
********************************************************

Порядок выполнения (от самого важного к менее важному):

Скобки ( )
Отрицание not
Логическое «И» and
Логическое «ИЛИ» or

Пример:
True and (False or not True) or not (True and False)

Разбираем пошагово:

not True → False
True and (False or False) or not (True and False)

В скобках: (False or False) → False, (True and False) → False
True and False or not False

Отрицание: not False → True
True and False or True

and: True and False → False
False or True

or: результат → True ✅

********************************************************
📌 Специальное значение None
********************************************************

None = «ничего», «пусто»

всегда пишется с заглавной буквы (как True и False)

None    # правильно
none    # ❌ ошибка
NONE    # ❌ ошибка


Проверка на пустоту:

my_var = None
my_var is None        # True

number = 1
number is None        # False


Проверка, что значение не пустое:

food = 'bambook'
food is not None      # True

********************************************************
Конверсия (приведение) типов
********************************************************

Приведение типов = преобразование одного типа данных в другой.
Для этого используются встроенные функции.

🔹 str() – в строку
Возвращает строковое представление любого объекта.
str(10)        # '10'
str(True)      # 'True'
str([1, 2, 3]) # '[1, 2, 3]'

🔹 bin() – в двоичную систему
bin(10)   # '0b1010'

🔹 oct() – в восьмеричную систему
oct(40)   # '0o50'

🔹 hex() – в шестнадцатеричную систему
hex(1000) # '0x3e8'

🔹 int() – в целое число

Принимает строки, числа, булевы значения.

Для строк можно указать систему счисления.

int('1')              # 1
int('0x3e8', 16)      # 1000
int(True)             # 1

🔹 float() – в число с плавающей точкой
float(1)        # 1.0
float('12.34')  # 12.34

🔹 bool() – в булево значение

0, 0.0, '' (пустая строка), [], None → False

всё остальное → True

bool(0)        # False
bool(100)      # True
bool('False')  # True   ← непустая строка = истина

********************************************************
Ветвления:
********************************************************
<код> if <условие> else <другой код>
Если условие истинно → выполняется первая часть.

Если ложно → вторая часть.

Примеры:

python
Copy code
# обычное ветвление
if x >= 0:
    print('Positive')
else:
    print('Negative')

# условное выражение
sign = 'Positive' if x >= 0 else 'Negative'
print(sign)   # Positive

# сразу в вызове функции
print('Positive' if x >= 0 else 'Negative')

📌 pass
Ключевое слово, означающее «ничего не делать». Нужно там, где синтаксис требует блок кода, но действий пока нет.

python
Copy code
if True:
    pass   # временно пусто

print('The other code')  # программа работает
Без pass в пустом блоке будет ошибка IndentationError.

📌 Модуль random
Подключение:

python
Copy code
from random import random, randint, choice
Функции:

random() – случайное число от 0.0 до 1.0

python
Copy code
random()   # 0.8241331973
random()   # 0.2942266539
randint(a, b) – случайное целое число в интервале [a, b]

python
Copy code
randint(1, 10)    # 1
randint(1, 10)    # 9
randint(50, 100)  # 68
choice(seq) – случайный элемент из последовательности

python
Copy code
choice(range(5))   # 1
choice('abcde')    # 'e'